package com.example.studentapp.adapterimport android.content.Contextimport android.content.Intentimport android.net.Uriimport android.view.LayoutInflaterimport android.view.Viewimport android.view.ViewGroupimport android.widget.Filterimport android.widget.ImageViewimport android.widget.PopupMenuimport android.widget.TextViewimport androidx.recyclerview.widget.RecyclerViewimport com.bumptech.glide.Glideimport com.example.studentapp.Rimport com.example.studentapp.database.MaterialsDataimport java.util.*import kotlin.collections.ArrayListimport kotlin.math.logclass MaterialsAdapter(    val context: Context,    private val materialsList: MutableList<MaterialsData>,) : RecyclerView.Adapter<MaterialsAdapter.MaterialsViewHolder>() {    val initialArticleDataList = ArrayList<MaterialsData>().apply {        addAll(materialsList)    }    override fun onCreateViewHolder(        parent: ViewGroup,        viewType: Int    ): MaterialsAdapter.MaterialsViewHolder {        val view = LayoutInflater.from(context).inflate(R.layout.material_item, parent, false)        return MaterialsViewHolder(view)    }    override fun onBindViewHolder(holder: MaterialsAdapter.MaterialsViewHolder, position: Int) {        val allMaterialsModel = materialsList[position]        holder.bind(allMaterialsModel)    }    override fun getItemCount(): Int = materialsList.size    inner class MaterialsViewHolder(itemView: View) : RecyclerView.ViewHolder(itemView) {        fun bind(materialModel: MaterialsData) {            val img = itemView.findViewById<ImageView>(R.id.materialImage)            val title = itemView.findViewById<TextView>(R.id.materialTitile)            val desc = itemView.findViewById<TextView>(R.id.materialDesc)            val openLink = itemView.findViewById<TextView>(R.id.openLink)            val editmenu = itemView.findViewById<ImageView>(R.id.editmenu)            openLink.setOnClickListener {                try {                    val url = materialModel.materialURL                    val intent = Intent(Intent.ACTION_VIEW, Uri.parse(url)).also { (it) }                    intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK)                    context.startActivity(intent)                }catch (e:Exception) { }            }//            editmenu.setOnClickListener{               val popupMenu = PopupMenu(context,it)                popupMenu.setOnMenuItemClickListener{item ->                    when(item.itemId){                        R.id.deleteMaterial -> {                            true                        }                        else -> false                    }                }                popupMenu.inflate(R.menu.change_menu)                popupMenu.show()            }//            title.text = materialModel.materialTitle            desc.text = materialModel.materialDesc            Glide.with(context)                .load(materialModel.materialImgURI)                .placeholder(R.drawable.defoultimage)                .into(img)        }//bind    }        private val titleFilter = object : Filter() {            override fun performFiltering(constraint: CharSequence?): FilterResults {                val filteredList: ArrayList<MaterialsData> = ArrayList()                if (constraint == null || constraint.isEmpty()) {                    initialArticleDataList.let { filteredList.addAll(it) }                } else {                    val query = constraint.toString().trim().toLowerCase()                    initialArticleDataList.forEach {                        if (it.materialTitle?.toLowerCase(Locale.ROOT)!!.contains(query)) {                            filteredList.add(it)                        }                    }                }                val results = FilterResults()                results.values = filteredList                return results            }            override fun publishResults(constraint: CharSequence?, results: FilterResults?) {                if (results?.values is ArrayList<*>) {                    materialsList.clear()                    materialsList.addAll(results.values as ArrayList<MaterialsData>)                    notifyDataSetChanged()                }            }        }    fun getFilter(): Filter {        return titleFilter    }}